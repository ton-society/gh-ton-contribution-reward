name: "Allowlist GitHub User"

description: "This action sends a POST request to add a new entry in TON Society ID Github allowlist when a given Github user's PR is merged."

inputs:
  github_token:
    description: "GitHub token to comment on PR"
    required: true
  x_api_key:
    description: "API key for authentication"
    required: true
  x_partner_id:
    description: "Partner ID for authentication"
    required: true
  github_pr_number:
    description: "The Pull Request number where to leave a comment with the reward link"
    required: true
  activity_id:
    description: "The activity ID"
    required: true
  xps:
    description: "Optional reward xps"
    required: false

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: sudo apt-get install jq -y

    - name: Get PR Author's GitHub User ID and Login
      id: pr_author
      shell: bash
      run: |
        pr_data=$(curl -s -H "Authorization: Bearer ${{ inputs.github_token }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ inputs.github_pr_number }}")

        pr_author_id=$(echo "$pr_data" | jq -r '.user.id')
        pr_author_login=$(echo "$pr_data" | jq -r '.user.login // empty')

        echo "PR Author's GitHub ID: $pr_author_id"
        echo "PR Author's Login: $pr_author_login"

        echo "pr_author_id=$pr_author_id" >> "$GITHUB_ENV"
        echo "pr_author_login=$pr_author_login" >> "$GITHUB_ENV"

    - name: Call Allowlist API and store reward link
      id: call_api
      shell: bash
      run: |
        if [[ -n "${{ inputs.xps }}" ]]; then
          echo "‚ÑπÔ∏è Including xps value: ${{ inputs.xps }}"
          request_body=$(jq -n \
            --arg xps "${{ inputs.xps }}" \
            '{attributes: [{trait_type: "xps", value: $xps}]}')
        else
          echo "‚ÑπÔ∏è No xps provided. Sending empty request body."
          request_body="{}"
        fi

        echo "‚û°Ô∏è Sending POST request..."
        curl_output=$(mktemp)
        http_code=$(curl -s -o "$curl_output" -w "%{http_code}" -X POST "https://society.ton.org/v1/activities/${{ inputs.activity_id }}/allowlist/github-ids/${{ env.pr_author_id }}" \
          -H "x-api-key: ${{ inputs.x_api_key }}" \
          -H "x-partner-id: ${{ inputs.x_partner_id }}" \
          -H "Content-Type: application/json" \
          -d "$request_body")

        http_body=$(cat "$curl_output")

        echo "HTTP status: $http_code"
        echo "Response body: $http_body"

        if [[ "$http_code" -lt 200 || "$http_code" -ge 300 ]]; then
          echo "‚ùå API call failed with status $http_code"
          exit 1
        fi

        reward_link=$(echo "$http_body" | jq -r '.data.reward_link_url // empty')

        if [ -z "$reward_link" ]; then
          echo "‚ùå reward_link_url not found in response."
          exit 1
        fi

        echo "‚úÖ Received reward link: $reward_link"
        echo "reward_link_url=$reward_link" >> "$GITHUB_OUTPUT"

    - name: Comment reward link on PR
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      run: |
        repo="${{ github.repository }}"
        reward_link="${{ steps.call_api.outputs.reward_link_url }}"

        if [ -z "$reward_link" ]; then
          echo "‚ö†Ô∏è No reward link to comment. Skipping comment step."
          exit 0
        fi

        comment_body="üéâ Hi there, thanks for your contribution! Here‚Äôs your reward [link]($reward_link). Receive more rewards and grow your reputation in the TON Developers league"

        pr_author="${{ env.pr_author_login }}"
        if [ -z "$pr_author" ]; then
          comment_body="üéâ Hey there @${pr_author}, thanks for your contribution! Here‚Äôs your reward [link]($reward_link). Receive more rewards and grow your reputation in the TON Developers league"
        fi

        curl -s -X POST \
          -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Content-Type: application/json" \
          -d "$(jq -n --arg body "$comment_body" '{body: $body}')" \
          "https://api.github.com/repos/$repo/issues/${{ inputs.github_pr_number }}/comments"
