name: "SBT Reward on PR Merge"
description: "Awards user SBT reward for merged PR"
branding:
  icon: "chevron-right"
  color: "blue"

inputs:
  github_token:
    description: "GitHub token used to read PR details and post comments/labels"
    required: true
  x_api_key:
    description: "API key for authentication"
    required: true
  x_partner_id:
    description: "Partner ID for authentication"
    required: true

runs:
  using: "composite"
  steps:
    - name: Process commit and reward
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        # language=js
        script: |
          const commit_sha = context.payload.after;

          // Get PR associated with this commit
          const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({
            ...context.repo,
            commit_sha
          });

          if (!prs.data || prs.data.length === 0) {
            core.notice(`No PR associated with commit ${commit_sha}`);
            return;
          }

          // Find the merged PR
          const mergedPR = prs.data.find(pr => pr.merged_at !== null);
          if (!mergedPR) {
            core.notice(`No merged PR found for commit ${commit_sha}`);
            return;
          }

          const pr_number = mergedPR.number;
          const user_id = mergedPR.user.id;
          const user_login = mergedPR.user.login;
          const pr_title = mergedPR.title;

          // Ensure that PR is approved
          const reviews = (await github.rest.pulls.listReviews({ ...context.repo, pull_number: pr_number })).data;
          const approvals = reviews.filter(review => review.state === 'APPROVED');

          let score = 0;
          let activity_id = 0;
          let wallet = null;

          // Only last reviewer comment is counted
          for (const review of approvals) {
            if (!review.body) continue;

            const match_score = review.body.match(/SCORE\s*=\s*(-?\d+)/i);
            if (!match_score) continue;

            const match_activity_id = review.body.match(/ACTIVITY_ID\s*=\s*(-?\d+)/i);
            if (!match_activity_id) continue;

            const permission = (await github.rest.repos.getCollaboratorPermissionLevel({
              ...context.repo,
              username: review.user.login
            })).data.permission;

            if (['admin', 'maintain', 'write'].includes(permission)) {
              score = parseInt(match_score[1], 10);
              activity_id = parseInt(match_activity_id[1], 10);

              const match_wallet = review.body.match(/WALLET\s*=\s*([A-Za-z0-9_-]+)/i);
              if (match_wallet) {
                wallet = match_wallet[1];
              }
            }
          }

          if (activity_id === 0) {
            core.notice(`No activity_id provided in the reviwer comment.`);
            return;
          }

          const x_api_key = `${{ inputs.x_api_key }}`;
          const x_partner_id = `${{ inputs.x_partner_id }}`;
          const description = `Reward for the Pull Request #${pr_number} titled "${pr_title}"`;
          const payload = { score, description };
          const url = '${{ secrets.SBT_PLATFORM_API_URL }}/activities/${activity_id}/allowlist/';
          if (wallet) {
            url += `wallets/${wallet}`;
          } else {
            url += `github-ids/${user_id}`;
          }

          const body = JSON.stringify(payload);
          const response = await fetch(url, {
            method: 'POST',
            headers: {
              'x-api-key': x_api_key,
              'x-partner-id': x_partner_id,
              'Content-Type': 'application/json'
            },
            body,
          });

          if (!response.ok) {
            core.notice(`Failed to POST reward for activity_id=${activity_id}, user_id=${user_id}, score=${score}, status: ${response.status}`);
            return;
          }

          const result = await response.json();
          const reward_link = result.data.reward_link_url;

          let noticeMsg = `ðŸŽ‰ Reward issued for activity_id=${activity_id} with score=${score}: ${reward_link}`;
          let commentMsg = `ðŸŽ‰ @${user_login}, your reward is ready! [Claim it here](${reward_link})`;
          if (wallet) {
            noticeMsg = `ðŸŽ‰ Reward issued for activity_id=${activity_id} with score=${score} for wallet address ${wallet}: ${reward_link}`;
            commentMsg = `ðŸŽ‰ @${user_login}, your reward for wallet address ${wallet} is ready! [Claim it here](${reward_link})`
          }

          core.notice(noticeMsg);
          await github.rest.issues.createComment({
            ...context.repo,
            issue_number: pr_number,
            body: commentMsg,
          });
